// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TotemPWA.Data;

#nullable disable

namespace TotemPWA.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250628165000_CriacaoTabelaProductIngredient")]
    partial class CriacaoTabelaProductIngredient
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasDiscriminator().HasValue("Client");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TotemPWA.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Lanches",
                            Slug = "lanches"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Combos",
                            Slug = "combos"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sobremesas",
                            Slug = "sobremesas"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bebidas",
                            Slug = "bebidas"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Extras",
                            Slug = "extras"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Molhos",
                            Slug = "molhos"
                        },
                        new
                        {
                            Id = 7,
                            Name = "C#",
                            ParentCategoryId = 1,
                            Slug = "c"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Java",
                            ParentCategoryId = 1,
                            Slug = "java"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Python",
                            ParentCategoryId = 1,
                            Slug = "python"
                        },
                        new
                        {
                            Id = 10,
                            Name = "JavaScript",
                            ParentCategoryId = 1,
                            Slug = "javascript"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Refrigerantes",
                            ParentCategoryId = 4,
                            Slug = "refrigerantes"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Cafés",
                            ParentCategoryId = 4,
                            Slug = "cafs"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Acompanhamentos",
                            ParentCategoryId = 5,
                            Slug = "acompanhamentos"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Anéis de Loop",
                            ParentCategoryId = 5,
                            Slug = "anis-de-loop"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Tipos de Molhos",
                            ParentCategoryId = 6,
                            Slug = "tipos-de-molhos"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Molhos Picantes",
                            ParentCategoryId = 15,
                            Slug = "molhos-picantes"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Molhos Doces",
                            ParentCategoryId = 15,
                            Slug = "molhos-doces"
                        });
                });

            modelBuilder.Entity("TotemPWA.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Limit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("TotemPWA.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 7,
                            Description = "Burguer orientado a objetos com queijo derretido",
                            Name = "C# Burguer",
                            Price = 18.50m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "C# Burguer + Loop Fries + Byte-Cola",
                            Name = "Combo Stack Overflow",
                            Price = 32.99m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 12,
                            Description = "Café forte com robusta implementação",
                            Name = "JavaBean Espresso",
                            Price = 7.50m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 13,
                            Description = "Batatas em looping infinito",
                            Name = "Loop Fries",
                            Price = 9.00m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 6,
                            Description = "Só aparece quando você não espera",
                            Name = "NullPointer Molho",
                            Price = 3.00m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 8,
                            Description = "Sabor não encontrado, mas delicioso",
                            Name = "Burguer 404",
                            Price = 19.99m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 9,
                            Description = "Sanduíche dinâmico e legível",
                            Name = "Snake.py Sanduíche",
                            Price = 17.00m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 10,
                            Description = "Burguer assíncrono com dois hambúrgueres",
                            Name = "JS Double Shot",
                            Price = 21.00m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 11,
                            Description = "Refrigerante com sabor binário",
                            Name = "Byte-Cola",
                            Price = 5.50m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Description = "JS Double Shot + Snake.py + Byte-Cola",
                            Name = "Combo Dev Full Stack",
                            Price = 39.90m
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            Description = "Sobremesa que quebra qualquer dieta",
                            Name = "Exception Sundae",
                            Price = 12.00m
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            Description = "Doce processado com zero erros",
                            Name = "Compiler Cheesecake",
                            Price = 10.50m
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 12,
                            Description = "Café com operadores booleanos",
                            Name = "Latte Lógico",
                            Price = 6.00m
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 13,
                            Description = "Batatas fritas com comportamento inesperado",
                            Name = "Bug Fries",
                            Price = 8.90m
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 7,
                            Description = "Frango funcional com sabor puro",
                            Name = "Lambda Chicken",
                            Price = 16.99m
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 16,
                            Description = "Molho picante que trata qualquer exceção",
                            Name = "Spicy Try-Catch",
                            Price = 4.50m
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 17,
                            Description = "Molho doce com final em recursão infinita",
                            Name = "Sweet Loop",
                            Price = 4.00m
                        });
                });

            modelBuilder.Entity("TotemPWA.Models.ProductIngredient", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("ProductIngredients");
                });

            modelBuilder.Entity("TotemPWA.Models.Variation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AdditionalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Variations");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.HasBaseType("Client");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Employee");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "",
                            Name = "",
                            Password = "123456",
                            Type = "admin",
                            User = "Admin"
                        });
                });

            modelBuilder.Entity("TotemPWA.Models.Category", b =>
                {
                    b.HasOne("TotemPWA.Models.Category", "ParentCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("TotemPWA.Models.Product", b =>
                {
                    b.HasOne("TotemPWA.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TotemPWA.Models.ProductIngredient", b =>
                {
                    b.HasOne("TotemPWA.Models.Ingredient", "Ingredient")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TotemPWA.Models.Product", "Product")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TotemPWA.Models.Variation", b =>
                {
                    b.HasOne("TotemPWA.Models.Product", "Product")
                        .WithMany("Variations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TotemPWA.Models.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("TotemPWA.Models.Ingredient", b =>
                {
                    b.Navigation("ProductIngredients");
                });

            modelBuilder.Entity("TotemPWA.Models.Product", b =>
                {
                    b.Navigation("ProductIngredients");

                    b.Navigation("Variations");
                });
#pragma warning restore 612, 618
        }
    }
}
