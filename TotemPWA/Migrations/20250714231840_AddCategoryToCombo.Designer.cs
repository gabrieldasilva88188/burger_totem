// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TotemPWA.Data;

#nullable disable

namespace TotemPWA.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250714231840_AddCategoryToCombo")]
    partial class AddCategoryToCombo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("TotemPWA.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Lanches",
                            Slug = "lanches"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Combos",
                            Slug = "combos"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sobremesas",
                            Slug = "sobremesas"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bebidas",
                            Slug = "bebidas"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Extras",
                            Slug = "extras"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Molhos",
                            Slug = "molhos"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Smash Burgers",
                            ParentCategoryId = 1,
                            Slug = "smash-burgers"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Hambúrguer Artesanal",
                            ParentCategoryId = 1,
                            Slug = "hambrguer-artesanal"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Vegetarianos",
                            ParentCategoryId = 1,
                            Slug = "vegetarianos"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Frango",
                            ParentCategoryId = 1,
                            Slug = "frango"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Duplos e Triplo Burgers",
                            ParentCategoryId = 1,
                            Slug = "duplos-e-triplo-burgers"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Combo Econômico",
                            ParentCategoryId = 2,
                            Slug = "combo-econmico"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Combo Casal",
                            ParentCategoryId = 2,
                            Slug = "combo-casal"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Combo Infantil",
                            ParentCategoryId = 2,
                            Slug = "combo-infantil"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Combo Veggie",
                            ParentCategoryId = 2,
                            Slug = "combo-veggie"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Combo Premium",
                            ParentCategoryId = 2,
                            Slug = "combo-premium"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Sundaes",
                            ParentCategoryId = 3,
                            Slug = "sundaes"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Milkshakes",
                            ParentCategoryId = 3,
                            Slug = "milkshakes"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Brownies",
                            ParentCategoryId = 3,
                            Slug = "brownies"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Tortas Geladas",
                            ParentCategoryId = 3,
                            Slug = "tortas-geladas"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Sorvetes e Gelatos",
                            ParentCategoryId = 3,
                            Slug = "sorvetes-e-gelatos"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Refrigerantes",
                            ParentCategoryId = 4,
                            Slug = "refrigerantes"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Sucos Naturais",
                            ParentCategoryId = 4,
                            Slug = "sucos-naturais"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Energéticos",
                            ParentCategoryId = 4,
                            Slug = "energticos"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Bebidas Quentes",
                            ParentCategoryId = 4,
                            Slug = "bebidas-quentes"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Bebidas Zero Açúcar",
                            ParentCategoryId = 4,
                            Slug = "bebidas-zero-acar"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Batatas Fritas",
                            ParentCategoryId = 5,
                            Slug = "batatas-fritas"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Onion Rings",
                            ParentCategoryId = 5,
                            Slug = "onion-rings"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Nuggets",
                            ParentCategoryId = 5,
                            Slug = "nuggets"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Queijo Empanado",
                            ParentCategoryId = 5,
                            Slug = "queijo-empanado"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Salada Extra",
                            ParentCategoryId = 5,
                            Slug = "salada-extra"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Molhos Clássicos",
                            ParentCategoryId = 6,
                            Slug = "molhos-clssicos"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Molhos Picantes",
                            ParentCategoryId = 6,
                            Slug = "molhos-picantes"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Molhos Doces",
                            ParentCategoryId = 6,
                            Slug = "molhos-doces"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Molhos Especiais da Casa",
                            ParentCategoryId = 6,
                            Slug = "molhos-especiais-da-casa"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Molhos Veganos",
                            ParentCategoryId = 6,
                            Slug = "molhos-veganos"
                        });
                });

            modelBuilder.Entity("TotemPWA.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasDiscriminator().HasValue("Client");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TotemPWA.Models.Combo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Combos");
                });

            modelBuilder.Entity("TotemPWA.Models.ComboProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ComboId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ProductId");

                    b.ToTable("ComboProducts");
                });

            modelBuilder.Entity("TotemPWA.Models.Cupom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Discount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cupons");
                });

            modelBuilder.Entity("TotemPWA.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB");

                    b.Property<int>("Limit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("TotemPWA.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 7,
                            Description = "Burguer orientado a objetos com queijo derretido",
                            Name = "C# Burguer",
                            Price = 18.50m,
                            Slug = "c-burguer"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 7,
                            Description = "Lanche organizado por indentação com sabor dinâmico",
                            Name = "Python Stack",
                            Price = 17.90m,
                            Slug = "python-stack"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 8,
                            Description = "Bagunçado, mas funcional",
                            Name = "PHP Buguer",
                            Price = 15.90m,
                            Slug = "php-buguer"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 8,
                            Description = "Sanduíche robusto com tipagem forte",
                            Name = "Java Sandwich",
                            Price = 18.00m,
                            Slug = "java-sandwich"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 11,
                            Description = "Burger crocante com padrão de arquitetura limpa",
                            Name = "Crunch#",
                            Price = 19.90m,
                            Slug = "crunch"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 9,
                            Description = "Requintado, elegante e poderoso",
                            Name = "Ruby Royale",
                            Price = 22.00m,
                            Slug = "ruby-royale"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 10,
                            Description = "Prático, rápido e direto ao ponto",
                            Name = "Go Burguer",
                            Price = 17.50m,
                            Slug = "go-burguer"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 10,
                            Description = "Com cheddar intenso, goroutines de sabor",
                            Name = "Go Burguer Cheddar",
                            Price = 18.90m,
                            Slug = "go-burguer-cheddar"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            Description = "Opção vegetariana com performance",
                            Name = "Go Burguer Veggie",
                            Price = 16.50m,
                            Slug = "go-burguer-veggie"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 16,
                            Description = "JS Double Shot + Snake.py + Byte-Cola",
                            Name = "Combo Full Stack",
                            Price = 39.90m,
                            Slug = "combo-full-stack"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 14,
                            Description = "Combo perfeito para codar e matar a fome",
                            Name = "Dev Meal",
                            Price = 34.90m,
                            Slug = "dev-meal"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 15,
                            Description = "Combo com itens refatorados do menu",
                            Name = "Refatoração Total",
                            Price = 37.90m,
                            Slug = "refatoracao-total"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 13,
                            Description = "Combo com dois Go Burguers e batata",
                            Name = "Go Burguers",
                            Price = 31.90m,
                            Slug = "go-burguers"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 12,
                            Description = "Para quem vive na nuvem (literalmente)",
                            Name = "Cloud Combo",
                            Price = 32.99m,
                            Slug = "cloud-combo"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 12,
                            Description = "Interface deliciosa entre fome e felicidade",
                            Name = "API Meal",
                            Price = 33.50m,
                            Slug = "api-meal"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 32,
                            Description = "Molho com sabor aprimorado",
                            Name = "Barbecue++",
                            Price = 3.50m,
                            Slug = "barbecue"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 33,
                            Description = "Molho picante, mas reativo",
                            Name = "Chipotle.js",
                            Price = 3.50m,
                            Slug = "chipotlejs"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 34,
                            Description = "Maionese inteligente que aprende seu gosto",
                            Name = "MayoAI",
                            Price = 3.00m,
                            Slug = "mayoai"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 32,
                            Description = "Molho básico com endpoints deliciosos",
                            Name = "KetchAPI",
                            Price = 2.90m,
                            Slug = "ketchapi"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 35,
                            Description = "Molho com sabor dinâmico e animado",
                            Name = "Salsa Script",
                            Price = 4.00m,
                            Slug = "salsa-script"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 36,
                            Description = "Visualmente bonito e bem formatado",
                            Name = "Css Cream",
                            Price = 4.00m,
                            Slug = "css-cream"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 18,
                            Description = "Bate tudo e retorna o melhor resultado",
                            Name = "MilkShake SQL",
                            Price = 10.00m,
                            Slug = "milkshake-sql"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 17,
                            Description = "Sobremesa quente hospedada com amor",
                            Name = "Petit Gateau da Nuvem",
                            Price = 12.90m,
                            Slug = "petit-gateau-da-nuvem"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 21,
                            Description = "Sempre responsiva e cremosa",
                            Name = "Casquinha Bootstrap",
                            Price = 6.00m,
                            Slug = "casquinha-bootstrap"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 19,
                            Description = "Doces armazenados para carregamento rápido",
                            Name = "Cache Cookies",
                            Price = 7.50m,
                            Slug = "cache-cookies"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 20,
                            Description = "Fácil de consumir e muito poderosa",
                            Name = "Python Pie",
                            Price = 9.00m,
                            Slug = "python-pie"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 20,
                            Description = "Bolo orientado a delícias",
                            Name = "Cake++",
                            Price = 10.50m,
                            Slug = "cake"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 22,
                            Description = "Refrigerante com sintaxe refrescante",
                            Name = "ColaScript",
                            Price = 5.50m,
                            Slug = "colascript"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 23,
                            Description = "Suco forte e robusto",
                            Name = "JavaJuice",
                            Price = 6.00m,
                            Slug = "javajuice"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 24,
                            Description = "Refresca na hora e reage ao seu gosto",
                            Name = "React Refresco",
                            Price = 6.50m,
                            Slug = "react-refresco"
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 24,
                            Description = "Bebida funcional e saborosa",
                            Name = "SmoothieScript",
                            Price = 7.00m,
                            Slug = "smoothiescript"
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 26,
                            Description = "Limonada elegante com sabor refinado",
                            Name = "Ruby Lemonade",
                            Price = 6.90m,
                            Slug = "ruby-lemonade"
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 25,
                            Description = "Bebida ágil e intensa",
                            Name = "Swift Sake",
                            Price = 8.00m,
                            Slug = "swift-sake"
                        });
                });

            modelBuilder.Entity("TotemPWA.Models.ProductIngredient", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("ProductIngredients");
                });

            modelBuilder.Entity("TotemPWA.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ComboId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Percent")
                        .HasColumnType("REAL");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ProductId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("TotemPWA.Models.Variation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AdditionalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Variations");
                });

            modelBuilder.Entity("TotemPWA.Models.Employee", b =>
                {
                    b.HasBaseType("TotemPWA.Models.Client");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Employee");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "",
                            Name = "",
                            Password = "123456",
                            Type = "admin",
                            User = "Admin"
                        });
                });

            modelBuilder.Entity("TotemPWA.Models.Category", b =>
                {
                    b.HasOne("TotemPWA.Models.Category", "ParentCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("TotemPWA.Models.Combo", b =>
                {
                    b.HasOne("TotemPWA.Models.Category", "Category")
                        .WithMany("Combos")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TotemPWA.Models.ComboProduct", b =>
                {
                    b.HasOne("TotemPWA.Models.Combo", "Combo")
                        .WithMany("ComboProducts")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TotemPWA.Models.Product", "Product")
                        .WithMany("ComboProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TotemPWA.Models.Product", b =>
                {
                    b.HasOne("TotemPWA.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TotemPWA.Models.ProductIngredient", b =>
                {
                    b.HasOne("TotemPWA.Models.Ingredient", "Ingredient")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TotemPWA.Models.Product", "Product")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TotemPWA.Models.Promotion", b =>
                {
                    b.HasOne("TotemPWA.Models.Combo", "Combo")
                        .WithMany("Promotions")
                        .HasForeignKey("ComboId");

                    b.HasOne("TotemPWA.Models.Product", "Product")
                        .WithMany("Promotions")
                        .HasForeignKey("ProductId");

                    b.Navigation("Combo");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TotemPWA.Models.Variation", b =>
                {
                    b.HasOne("TotemPWA.Models.Product", "Product")
                        .WithMany("Variations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TotemPWA.Models.Category", b =>
                {
                    b.Navigation("Combos");

                    b.Navigation("Products");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("TotemPWA.Models.Combo", b =>
                {
                    b.Navigation("ComboProducts");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("TotemPWA.Models.Ingredient", b =>
                {
                    b.Navigation("ProductIngredients");
                });

            modelBuilder.Entity("TotemPWA.Models.Product", b =>
                {
                    b.Navigation("ComboProducts");

                    b.Navigation("ProductIngredients");

                    b.Navigation("Promotions");

                    b.Navigation("Variations");
                });
#pragma warning restore 612, 618
        }
    }
}
