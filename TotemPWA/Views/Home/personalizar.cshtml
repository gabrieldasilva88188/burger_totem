@{
    Layout = "_WelcomeLayout";
    var cardapioUrl = Url.Action("Cardapio", "Home");
    var nome = ViewBag.Nome ?? "Lanche";
    var preco = ViewBag.Preco ?? "0,00";
    var imagem = ViewBag.Imagem ?? "~/img/default.png";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">

<link rel="stylesheet" href="@Url.Content("~/css/personalizar.css")">

<div class="modal-content">

<img id="produto-imagem" src="@imagem" alt="@nome" />

    <h2 id="produto-nome">@(ViewBag.Editando == true ? "Editar " : "Personalizar ")@nome</h2>
    <p id="produto-preco">PreÃ§o: R$ @preco</p>

    <div class="info-ingredientes">
        <p><strong>ðŸ’¡ Dica:</strong> Os ingredientes jÃ¡ vÃªm inclusos no lanche. Adicione mais se desejar!</p>
    </div>

    <h4 id="adicionar-ingredientes">Escolha os Ingredientes</h4>

    <div id="ingredientes-container">
        @if (ViewBag.Ingredientes != null)
        {
            foreach (var ingrediente in ViewBag.Ingredientes)
            {
                string nomeIngrediente = ingrediente.Name;
                int idIngrediente = ingrediente.Id;
                double precoIngrediente = (double)ingrediente.Price;
                int limite = ingrediente.Limit;
                int quantidade = ingrediente.Quantity;
                <div class="ingrediente-item">
                    <span class="ingrediente-nome">@nomeIngrediente (R$ @precoIngrediente.ToString("0.00"))</span>
                    <div class="ingrediente-controles">
                        <button class="diminuir" onclick="alterarIngrediente(@idIngrediente, -1)">-</button>
                        <span id="quantidade-@idIngrediente" class="quantidade">@quantidade</span>
                        <button class="aumentar" onclick="alterarIngrediente(@idIngrediente, 1)">+</button>
                    </div>
                    <img src="@Url.Content("~/img/ingredientes/" + @nomeIngrediente.ToLower() + ".png")" alt="@nomeIngrediente" class="ingrediente-img">
                </div>
            }
        }
    </div>

    <div class="botoes-personalizar">
        <button class="btn-voltar" onclick="redirecionarCardapio()">  <i class="fa-solid fa-arrow-left">  </i> Voltar
</button>
        <button id="confirmar-personalizacao" onclick="adicionarAoCarrinho()">@(ViewBag.Editando == true ? "Atualizar Carrinho" : "Adicionar ao Carrinho")</button>
    
    </div>


</div>

<script>
    const cardapioUrl = '@cardapioUrl';
    let precoBaseOriginal = 0;

    function redirecionarCardapio() {
        window.location.href = '@Url.Action("Cardapio", "Home")';
    }

    // Inicializa o preÃ§o base quando a pÃ¡gina carrega
    document.addEventListener('DOMContentLoaded', function() {
        const precoTexto = document.getElementById("produto-preco").innerText.replace("PreÃ§o: R$ ", "").replace(",", ".");
        precoBaseOriginal = parseFloat(precoTexto) || 0;
        
        // Se estiver editando, carrega os dados do item existente
        @if (ViewBag.Editando == true)
        {
            <text>
            carregarDadosEdicao();
            </text>
        }
    });
    
    function carregarDadosEdicao() {
        const itens = JSON.parse(sessionStorage.getItem("itensCarrinho")) || [];
        const produtoId = @ViewBag.ProdutoId;
        
        // Encontra o item no carrinho
        const itemIndex = itens.findIndex(item => item.id === produtoId);
        if (itemIndex !== -1) {
            const item = itens[itemIndex];
            
            // Carrega as quantidades dos ingredientes
            // Itera sobre as propriedades do objeto 'ingredientes' para obter nome e quantidade
            Object.entries(item.ingredientes || {}).forEach(([nomeIngredienteItem, qtdItem]) => {
                const spans = document.querySelectorAll('.quantidade');
                spans.forEach(span => {
                    const ingredienteItemDiv = span.closest('.ingrediente-item');
                    if (ingredienteItemDiv) {
                        const nomeSpan = ingredienteItemDiv.querySelector('.ingrediente-nome');
                        // Verifica se o nome do ingrediente no HTML (removendo preÃ§o) corresponde ao nome do item no carrinho
                        const nomeHtmlLimpo = nomeSpan.textContent.split('(')[0].trim();
                        if (nomeHtmlLimpo === nomeIngredienteItem) {
                            span.innerText = qtdItem;
                        }
                    }
                });
            });
            
            // Atualiza o preÃ§o
            atualizarPrecoTempoReal();
        }
    }
</script>

<script>
    function alterarQtd(valor) {
        const input = document.getElementById("quantidade-lanche");
        let novaQtd = parseInt(input.value) + valor;
        if (novaQtd >= 1) input.value = novaQtd;
    }

    function alterarIngrediente(id, valor) {
        const span = document.getElementById(`quantidade-${id}`);
        let qtd = parseInt(span.innerText) + valor;
        if (qtd < 0) qtd = 0; // Garante que a quantidade nÃ£o seja negativa
        span.innerText = qtd;
        atualizarPrecoTempoReal();
    }

    function atualizarPrecoTempoReal() {
        let precoIngredientesExtras = 0.0;

        const precosIngredientes = {};
        const quantidadesPadrao = {};
        @if (ViewBag.Ingredientes != null)
        {
            foreach (var ingrediente in ViewBag.Ingredientes)
            {
                <text>precosIngredientes[@ingrediente.Id] = @(((double)ingrediente.Price).ToString("0.00", System.Globalization.CultureInfo.InvariantCulture));</text>
                <text>quantidadesPadrao[@ingrediente.Id] = @ingrediente.Quantity;</text>
            }
        }

        document.querySelectorAll(".quantidade").forEach(span => {
            const idIngrediente = parseInt(span.id.replace("quantidade-", ""));
            const qtdAtual = parseInt(span.innerText) || 0;
            const qtdPadrao = quantidadesPadrao[idIngrediente] || 0;
            const qtdExtra = qtdAtual - qtdPadrao;
            
            if (qtdExtra > 0) {
                const precoIngrediente = parseFloat(precosIngredientes[idIngrediente]) || 0;
                precoIngredientesExtras += precoIngrediente * qtdExtra;
            }
        });

        const precoFinal = precoBaseOriginal + precoIngredientesExtras;
        
        const elementoPreco = document.getElementById("produto-preco");
        if (elementoPreco) {
            elementoPreco.textContent = `PreÃ§o: R$ ${precoFinal.toFixed(2).replace(".", ",")}`;
        }
    }

   function adicionarAoCarrinho() {
Â  Â  Â  Â  const nome = document.getElementById("produto-nome").innerText.replace("Personalizar ", "").replace("Editar ", "");
Â  Â  Â  Â  const editando = @(ViewBag.Editando == true ? "true" : "false");
Â  Â  Â  Â  const produtoId = @ViewBag.ProdutoId;
        const produtoSlug = '@ViewBag.ProdutoSlug'; // <-- ADICIONE ESTA LINHA PARA PEGAR O SLUG DA VIEW BAG
Â  Â  Â  Â  
Â  Â  Â  Â  
Â  Â  Â  Â  const quantidade = 1; // Quantidade de unidades do produto sendo adicionado/editado
Â  Â  Â  Â  let precoBase = precoBaseOriginal;
Â  Â  Â  Â  
Â  Â  Â  Â  if (isNaN(precoBase) || precoBase <= 0) {
Â  Â  Â  Â  Â  Â  alert("Erro: PreÃ§o base invÃ¡lido");
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  const ingredientes = {};
Â  Â  Â  Â  const ingredientesExtras = {};
Â  Â  Â  Â  let precoIngredientesExtras = 0.0;

Â  Â  Â  Â  const precosIngredientes = {};
Â  Â  Â  Â  const nomesIngredientes = {};
Â  Â  Â  Â  const quantidadesPadrao = {};
Â  Â  Â  Â  @if (ViewBag.Ingredientes != null)
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  foreach (var ingrediente in ViewBag.Ingredientes)
Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  <text>precosIngredientes[@ingrediente.Id] = @(((double)ingrediente.Price).ToString("0.00", System.Globalization.CultureInfo.InvariantCulture));</text>
Â  Â  Â  Â  Â  Â  Â  Â  <text>nomesIngredientes[@ingrediente.Id] = "@ingrediente.Name";</text>
Â  Â  Â  Â  Â  Â  Â  Â  <text>quantidadesPadrao[@ingrediente.Id] = @ingrediente.Quantity;</text>
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }

Â  Â  Â  Â  document.querySelectorAll(".quantidade").forEach(span => {
Â  Â  Â  Â  Â  Â  const idIngrediente = parseInt(span.id.replace("quantidade-", ""));
Â  Â  Â  Â  Â  Â  const qtdAtual = parseInt(span.innerText) || 0;
Â  Â  Â  Â  Â  Â  const qtdPadrao = quantidadesPadrao[idIngrediente] || 0;
Â  Â  Â  Â  Â  Â  const qtdExtra = qtdAtual - qtdPadrao;
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // Salva a quantidade total no objeto ingredientes
Â  Â  Â  Â  Â  Â  ingredientes[nomesIngredientes[idIngrediente]] = qtdAtual;
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // Se hÃ¡ ingredientes extras, calcula o preÃ§o e salva
Â  Â  Â  Â  Â  Â  if (qtdExtra > 0) {
Â  Â  Â  Â  Â  Â  Â  Â  const precoIngrediente = parseFloat(precosIngredientes[idIngrediente]) || 0;
Â  Â  Â  Â  Â  Â  Â  Â  precoIngredientesExtras += precoIngrediente * qtdExtra;
Â  Â  Â  Â  Â  Â  Â  Â  ingredientesExtras[nomesIngredientes[idIngrediente]] = qtdExtra;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });

Â  Â  Â  Â  const precoFinal = precoBase + precoIngredientesExtras;
Â  Â  Â  Â  const imagem = document.getElementById("produto-imagem").getAttribute("src");

Â  Â  Â  Â  console.log("URL da imagem capturada:", imagem);

Â  Â  Â  Â  if (isNaN(precoFinal) || precoFinal <= 0) {
Â  Â  Â  Â  Â  Â  alert("Erro: PreÃ§o final invÃ¡lido");
Â  Â  Â  Â  Â  Â  // Removi o console.error("Item invÃ¡lido:", item); daqui porque 'item' ainda nÃ£o existe
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  const item = {
Â  Â  Â  Â  Â  Â  id: produtoId,
            slug: produtoSlug, // <-- ADICIONE ESTA LINHA AQUI NO OBJETO ITEM
Â  Â  Â  Â  Â  Â  nome: nome,
Â  Â  Â  Â  Â  Â  quantidade: quantidade, 
Â  Â  Â  Â  Â  Â  precoUnitario: precoFinal, 
Â  Â  Â  Â  Â  Â  total: quantidade * precoFinal, 
Â  Â  Â  Â  Â  Â  ingredientes: ingredientes, 
Â  Â  Â  Â  Â  Â  ingredientesExtras: ingredientesExtras, 
Â  Â  Â  Â  Â  Â  precoIngredientesExtras: precoIngredientesExtras,
Â  Â  Â  Â  Â  Â  imagem: imagem
Â  Â  Â  Â  };

Â  Â  Â  Â  if (!item.nome || isNaN(item.total) || item.total <= 0) {
Â  Â  Â  Â  Â  Â  alert("Erro: Dados do item invÃ¡lidos");
Â  Â  Â  Â  Â  Â  console.error("Item invÃ¡lido:", item);
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  let itens = [];
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  itens = JSON.parse(sessionStorage.getItem("itensCarrinho")) || [];
Â  Â  Â  Â  Â  Â  if (!Array.isArray(itens)) itens = [];
Â  Â  Â  Â  } catch (e) {
Â  Â  Â  Â  Â  Â  itens = [];
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  if (editando) {
Â  Â  Â  Â  Â  Â  const itemIndex = itens.findIndex(i => i.id === produtoId);
Â  Â  Â  Â  Â  Â  if (itemIndex !== -1) {
Â  Â  Â  Â  Â  Â  Â  Â  // Preserve a quantidade original do item se ele jÃ¡ estava no carrinho
Â  Â  Â  Â  Â  Â  Â  Â  // ao invÃ©s de resetar para 1
Â  Â  Â  Â  Â  Â  Â  Â  const quantidadeOriginal = itens[itemIndex].quantidade || 1;
Â  Â  Â  Â  Â  Â  Â  Â  item.quantidade = quantidadeOriginal; 
Â  Â  Â  Â  Â  Â  Â  Â  item.total = quantidadeOriginal * item.precoUnitario; // Recalcula o total com a quantidade original
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  itens[itemIndex] = item;
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  itens.push(item);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  itens.push(item);
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  sessionStorage.setItem("itensCarrinho", JSON.stringify(itens));

Â  Â  Â  Â  recalcularTotalComCupom(); 

Â  Â  Â  Â  // Debug dos totais (agora serÃ£o os totais jÃ¡ com o cupom aplicado, se houver)
Â  Â  Â  Â  console.log("Salvando totais - Total itens:", sessionStorage.getItem("totalItens"), "Total pedido:", sessionStorage.getItem("totalPedido"));
Â  Â  Â  Â  console.log("SessionStorage apÃ³s salvar:", {
Â  Â  Â  Â  Â  Â  totalItens: sessionStorage.getItem("totalItens"),
Â  Â  Â  Â  Â  Â  totalPedido: sessionStorage.getItem("totalPedido")
Â  Â  Â  Â  });

Â  Â  Â  Â  console.log("Itens no carrinho apÃ³s " + (editando ? "atualizar" : "adicionar") + ":", itens);
Â  Â  Â  Â  
Â  Â  Â  Â  window.location.href = '@Url.Action("Cardapio", "Home")';
Â  Â  }

    function recalcularTotalComCupom() {
        let itens = JSON.parse(sessionStorage.getItem("itensCarrinho")) || [];
        let totalBruto = 0;

        // Calcula o total dos itens sem desconto
        itens.forEach(item => {
            totalBruto += (item.total || 0);
        });

        let totalFinal = totalBruto;
        const cupomAplicado = sessionStorage.getItem("cupomAplicado") === "true";
        const descontoCupom = parseFloat(sessionStorage.getItem("descontoCupom")) || 0;

        // Se houver um cupom aplicado, aplica o desconto
        if (cupomAplicado && descontoCupom > 0) {
            totalFinal = totalBruto * (1 - descontoCupom);
        }

        sessionStorage.setItem("totalPedido", totalFinal.toFixed(2));
        
        // Atualiza o total de itens
        let totalItens = 0;
        itens.forEach(i => {
            totalItens += (i.quantidade || 0);
        });
        sessionStorage.setItem("totalItens", totalItens);
    }
</script>